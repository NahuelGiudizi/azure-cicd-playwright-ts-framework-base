# Azure DevOps Pipeline - Matrix Strategy
# Ejecuta en paralelo en diferentes sistemas operativos

trigger:
  - main
  - develop

strategy:
  matrix:
    linux:
      imageName: "ubuntu-latest"
      osType: "linux"
    windows:
      imageName: "windows-latest"
      osType: "windows"

pool:
  vmImage: $(imageName)

variables:
  dockerImageName: "playwright-tests"

steps:
  # Checkout del repositorio
  - checkout: self
    displayName: "Checkout Repo"

  # Setup Docker (Linux)
  - task: DockerInstaller@0
    condition: eq(variables['osType'], 'linux')
    displayName: "Install Docker (Linux)"
    inputs:
      dockerVersion: "20.10.7"

  # Build Docker Image
  - task: Docker@2
    displayName: "Build Docker Image"
    inputs:
      command: "build"
      dockerfile: "Dockerfile"
      tags: "$(dockerImageName)"

  # Setup Environment Variables - Linux
  - task: Bash@3
    displayName: "Setup Environment Variables (Linux)"
    condition: eq(variables['osType'], 'linux')
    inputs:
      targetType: "inline"
      script: |
        echo "BASE_URL=$(BASE_URL)" > .env
        echo "API_BASE_URL=$(API_BASE_URL)" >> .env
        echo "TEST_EMAIL=$(TEST_EMAIL)" >> .env
        echo "TEST_PASSWORD=$(TEST_PASSWORD)" >> .env
        echo "TEST_USERNAME=$(TEST_USERNAME)" >> .env
        echo "EMAIL_USER=$(EMAIL_USER)" >> .env
        echo "EMAIL_PASS=$(EMAIL_PASS)" >> .env
        echo "EMAIL_RECIPIENTS=$(EMAIL_RECIPIENTS)" >> .env
        echo "Environment file created:"
        cat .env

  # Setup Environment Variables - Windows
  - task: PowerShell@2
    displayName: "Setup Environment Variables (Windows)"
    condition: eq(variables['osType'], 'windows')
    inputs:
      targetType: "inline"
      script: |
        "BASE_URL=$(BASE_URL)" | Out-File -FilePath .env -Encoding UTF8
        "API_BASE_URL=$(API_BASE_URL)" | Out-File -FilePath .env -Append -Encoding UTF8
        "TEST_EMAIL=$(TEST_EMAIL)" | Out-File -FilePath .env -Append -Encoding UTF8
        "TEST_PASSWORD=$(TEST_PASSWORD)" | Out-File -FilePath .env -Append -Encoding UTF8
        "TEST_USERNAME=$(TEST_USERNAME)" | Out-File -FilePath .env -Append -Encoding UTF8
        "EMAIL_USER=$(EMAIL_USER)" | Out-File -FilePath .env -Append -Encoding UTF8
        "EMAIL_PASS=$(EMAIL_PASS)" | Out-File -FilePath .env -Append -Encoding UTF8
        "EMAIL_RECIPIENTS=$(EMAIL_RECIPIENTS)" | Out-File -FilePath .env -Append -Encoding UTF8
        Write-Host "Environment file created:"
        Get-Content .env

  # Execute Tests with Docker (multiplataforma usando Docker task)
  - task: Docker@2
    displayName: "Execute E2E UI Tests"
    continueOnError: true
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run tests:e2e'

  - task: Docker@2
    displayName: "Execute API Tests"
    continueOnError: true
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run tests:api'

  # Publish Results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/results/test-results-*/*.xml"
      mergeTestResults: true
      testRunTitle: "$(osType) Test Results"
      publishRunAttachments: true
    displayName: "Publish Test Results"
    condition: always()

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "results"
      artifactName: "TestResults-$(osType)"
      publishLocation: "Container"
    displayName: "Publish Test Artifacts"
    condition: always()

  # Cleanup
  - task: Docker@2
    displayName: "Cleanup Docker Image"
    condition: always()
    inputs:
      command: "rmi"
      arguments: "$(dockerImageName) -f"
