pool:
  name: "Default"

variables:
  dockerImageName: "playwright-tests"

steps:
  # Checkout del repositorio
  - checkout: self
    displayName: "Checkout Repo"

  # Build de la imagen Docker (multiplataforma)
  - task: Docker@2
    displayName: "Build Docker Image"
    inputs:
      command: "build"
      dockerfile: "Dockerfile"
      tags: "$(dockerImageName)"

  # Configurar variables de entorno (multiplataforma)
  - task: Bash@3
    displayName: "Setup Environment Variables"
    inputs:
      targetType: "inline"
      script: |
        echo "BASE_URL=$(BASE_URL)" > .env
        echo "API_BASE_URL=$(API_BASE_URL)" >> .env
        echo "TEST_EMAIL=$(TEST_EMAIL)" >> .env
        echo "TEST_PASSWORD=$(TEST_PASSWORD)" >> .env
        echo "TEST_USERNAME=$(TEST_USERNAME)" >> .env
        echo "EMAIL_USER=$(EMAIL_USER)" >> .env
        echo "EMAIL_PASS=$(EMAIL_PASS)" >> .env
        echo "EMAIL_RECIPIENTS=$(EMAIL_RECIPIENTS)" >> .env
        echo "Environment file created:"
        cat .env

  # Ejecutar pruebas E2E (UI) con Docker (multiplataforma)
  - task: Docker@2
    displayName: "Execute E2E UI Tests with Docker"
    continueOnError: true
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run tests:e2e'

  # Ejecutar pruebas API con Docker (multiplataforma)
  - task: Docker@2
    displayName: "Execute API Tests with Docker"
    continueOnError: true
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run tests:api'

  # Publicar artefactos de E2E
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "results/playwright-report-e2e"
      artifactName: "PlaywrightReportE2E"
      publishLocation: "Container"
    displayName: "Publish E2E Test Reports"
    condition: always()

  # Publicar artefactos de API
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "results/playwright-report-api"
      artifactName: "PlaywrightReportAPI"
      publishLocation: "Container"
    displayName: "Publish API Test Reports"
    condition: always()

  # Publicar screenshots y videos de fallos
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: "test-results"
      artifactName: "TestFailureArtifacts"
      publishLocation: "Container"
    displayName: "Publish Test Failure Artifacts"
    condition: failed()

  # Publicar resultados de pruebas E2E
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/results/test-results-e2e/*.xml"
      mergeTestResults: false
      testRunTitle: "E2E UI Test Results"
      publishRunAttachments: true
    displayName: "Publish E2E Test Results"
    condition: always()

  # Publicar resultados de pruebas API
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/results/test-results-api/*.xml"
      mergeTestResults: false
      testRunTitle: "API Test Results"
      publishRunAttachments: true
    displayName: "Publish API Test Results"
    condition: always()

  # Comprimir artefactos con Docker (multiplataforma)
  - task: Docker@2
    displayName: "Compress Test Artifacts with Docker"
    condition: always()
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run compress:artifacts'

  # Enviar reporte por email con Docker (multiplataforma)
  - task: Docker@2
    displayName: "Send Test Results via Email with Docker"
    condition: always()
    inputs:
      command: "run"
      arguments: '--rm --env-file .env -v "$(Build.SourcesDirectory)/results":/app/results -v "$(Build.SourcesDirectory)/test-results":/app/test-results $(dockerImageName) npm run send:email'

  # Limpiar imagen Docker (multiplataforma)
  - task: Bash@3
    displayName: "Cleanup Docker Image"
    condition: always()
    inputs:
      targetType: "inline"
      script: |
        echo "Cleaning up Docker image..."
        docker rmi $(dockerImageName) -f || true
        echo "Docker cleanup completed"
