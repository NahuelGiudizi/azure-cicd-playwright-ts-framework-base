pool:
  name: "Default"

variables:
  dockerImageName: "playwright-tests"
  dockerTag: "latest"
  dockerFullName: "$(dockerImageName):$(dockerTag)"

steps:
  # ------------------------------
  # 1. Checkout del repositorio
  # ------------------------------
  - checkout: self
    displayName: "Checkout repository"

  # ------------------------------
  # 2. Build de la imagen Docker
  # ------------------------------
  - task: Docker@2
    displayName: "Build Docker image"
    inputs:
      command: build
      dockerfile: Dockerfile
      buildContext: "$(Build.SourcesDirectory)"
      tags: "$(dockerFullName)"

  - script: docker images
    displayName: "Verify Docker image built"

  # ------------------------------
  # 3. Setup de variables de entorno (.env)
  # ------------------------------
  - task: PowerShell@2
    displayName: "Create .env file"
    inputs:
      targetType: inline
      script: |
        $envVars = @(
          "BASE_URL=$(BASE_URL)",
          "API_BASE_URL=$(API_BASE_URL)",
          "TEST_EMAIL=$(TEST_EMAIL)",
          "TEST_PASSWORD=$(TEST_PASSWORD)",
          "TEST_USERNAME=$(TEST_USERNAME)",
          "EMAIL_USER=$(EMAIL_USER)",
          "EMAIL_PASS=$(EMAIL_PASS)",
          "EMAIL_RECIPIENTS=$(EMAIL_RECIPIENTS)"
        )
        $envVars | Out-File -FilePath .env -Encoding UTF8
        Write-Host "Generated .env:"
        Get-Content .env

  # ------------------------------
  # 4. Run E2E UI tests
  # ------------------------------
  - task: Docker@2
    displayName: "Run E2E UI tests"
    continueOnError: true
    inputs:
      command: run
      arguments: >
        --rm --env-file .env
        -v "$(Build.SourcesDirectory)/results:/app/results"
        -v "$(Build.SourcesDirectory)/test-results:/app/test-results"
        $(dockerFullName) npm run tests:e2e

  # ------------------------------
  # 5. Run API tests
  # ------------------------------
  - task: Docker@2
    displayName: "Run API tests"
    continueOnError: true
    inputs:
      command: run
      arguments: >
        --rm --env-file .env
        -v "$(Build.SourcesDirectory)/results:/app/results"
        -v "$(Build.SourcesDirectory)/test-results:/app/test-results"
        $(dockerFullName) npm run tests:api

  # ------------------------------
  # 6. Publicaci√≥n de reportes y artefactos
  # ------------------------------
  - task: PublishBuildArtifacts@1
    displayName: "Publish E2E Test Report"
    inputs:
      pathToPublish: "results/playwright-report-e2e"
      artifactName: "PlaywrightReportE2E"
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: "Publish API Test Report"
    inputs:
      pathToPublish: "results/playwright-report-api"
      artifactName: "PlaywrightReportAPI"
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: "Publish Failure Screenshots & Videos"
    inputs:
      pathToPublish: "test-results"
      artifactName: "FailureArtifacts"
    condition: failed()

  - task: PublishTestResults@2
    displayName: "Publish E2E Test Results (JUnit)"
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: "**/results/test-results-e2e/*.xml"
      publishRunAttachments: true
    condition: always()

  - task: PublishTestResults@2
    displayName: "Publish API Test Results (JUnit)"
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: "**/results/test-results-api/*.xml"
      publishRunAttachments: true
    condition: always()

  # ------------------------------
  # 7. Cleanup
  # ------------------------------
  - task: PowerShell@2
    displayName: "Cleanup Docker image"
    condition: always()
    inputs:
      targetType: inline
      script: |
        Write-Host "Cleaning Docker image..."
        docker rmi $(dockerFullName) -f || Write-Host "Image not found, skip cleanup"
